#!/usr/bin/env python3

import csv
import copy

class Reports:
    def __init__(self):
        self.reports = []
        
    def add(self, report):
        self.reports.append(report)
        
    def eval_area(reports):
        y = 0
        x = 0
        area = 0
        for report in reports:
            new_y = y + report['TP']
            new_x = x + 1
            area += (y + new_y) / 2
            y = new_y
            x = new_x
            print(f'{y}')
        print(f'Area: {area}')
        print(f'ADPF: {area / (y * len(reports))}')
        
    def best_sort(self):
        reports = sorted(self.reports, key=lambda r: (-r['TP'], r['No']))
        Reports.eval_area(reports)
    
    def random_sort(self):
        tp = 0
        for report in self.reports:
            tp += report['TP']
        score = tp / len(self.reports)
        y = 0
        x = 0
        area = 0
        for _ in range(0, len(self.reports)):
            new_y = y + score
            new_x = x + 1
            area += (y + new_y) / 2
            y = new_y
            x = new_x
            print(f'{y}')
        print(f'Area: {area}')
        print(f'ADPF: {area / (y * len(self.reports))}')
    
    def sort_by(self, key):
        print(f'=================== {key} ===================')
        if key == 'Best':
            self.best_sort()
            print(f'=================== {key} ===================')
            return
        if key == 'Random':
            self.random_sort()
            print(f'=================== {key} ===================')
            return
        reports = copy.deepcopy(self.reports)
        reports = sorted(reports, key=lambda r: (r[key], r['No']))
        # adjust TP to random value for reports with same key
        # e.g.
        # key (GuessES):   0   0   0   1   1   1   1   2   2   2   2
        # TP               1   1   0   1   1   0   0   1   0   0   0
        # Adjusted TP:    2/3 2/3 2/3 2/4 2/4 2/4 2/4 1/4 1/4 1/4 1/4
        prev_report = reports[0]
        prev_idx = 0
        cur_sum = prev_report['TP']
        for cur_idx in range(1, len(reports)):
            cur_report = reports[cur_idx]
            if prev_report[key] != cur_report[key]:
                adjusted = cur_sum / (cur_idx - prev_idx)
                for i in range(prev_idx, cur_idx):
                   reports[i]['TP'] = adjusted
                prev_idx = cur_idx
                prev_report = cur_report
                cur_sum = cur_report['TP']
            else:
                cur_sum += cur_report['TP']
        Reports.eval_area(reports)
        print(f'=================== {key} ===================')

if __name__ == '__main__':
    csv_file = 'total.csv'
    reports = Reports()
    with open(csv_file, newline='') as file:
        reader = csv.DictReader(file, delimiter=',')
        for row in reader:
            report = {}
            for k,v in row.items():
                report[k] = int(v) if (k != 'File' and k != 'Note') else v.strip()
            reports.add(report)

    reports.sort_by('GuessES')
    reports.sort_by('ConstraintES')
    reports.sort_by('StatementES')
    reports.sort_by('Guess')
    reports.sort_by('Constraint')
    reports.sort_by('Statement')
    reports.sort_by('Best')
    reports.sort_by('Random')
